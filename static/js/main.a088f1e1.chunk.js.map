{"version":3,"sources":["hoc/auxillary.component.jsx","components/layout/layout.component.jsx","components/burger/burger-ingredient/burger-ingredient.component.jsx","components/burger/burger.component.jsx","containers/burger-builder/burger-builder.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Aux","props","children","Layout","className","BurgerIngredients","type","Burger","transformedIngredients","Object","keys","ingredients","map","igKey","console","log","Array","_","i","key","BurderBuilder","state","salad","bacon","cheese","meat","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAEeA,G,MAFH,SAAAC,GAAK,OAAIA,EAAMC,WCaZC,G,MAPA,SAAAF,GAAK,OAClB,kBAAC,EAAD,KACE,8DACA,0BAAMG,UAAU,WAAWH,EAAMC,a,0CCwBtBG,G,MA5BW,SAAAJ,GACxB,OAAQA,EAAMK,MACZ,IAAK,eACH,OAAO,yBAAKF,UAAU,iBACxB,IAAK,YACH,OACE,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YAGrB,IAAK,OACH,OAAO,yBAAKA,UAAU,SACxB,IAAK,SACH,OAAO,yBAAKA,UAAU,WACxB,IAAK,QACH,OAAO,yBAAKA,UAAU,UACxB,IAAK,QACH,OAAO,yBAAKA,UAAU,UACxB,QACE,OAAO,QCHEG,G,MAhBA,SAAAN,GACb,IAAMO,EAAyBC,OAAOC,KAAKT,EAAMU,aAAaC,KAAI,SAAAC,GAEhE,OADAC,QAAQC,IAAR,YAAgBC,MAAMf,EAAMU,YAAYE,MACjC,YAAIG,MAAMf,EAAMU,YAAYE,KAASD,KAAI,SAACK,EAAGC,GAClD,OAAO,kBAAC,EAAD,CAAkBC,IAAKN,EAAQK,EAAGZ,KAAMO,UAGnD,OACE,yBAAKT,UAAU,UACb,kBAAC,EAAD,CAAkBE,KAAK,cACtBE,EACD,kBAAC,EAAD,CAAkBF,KAAK,oBCQdc,E,2MAnBbC,MAAQ,CACNV,YAAa,CACXW,MAAO,EACPC,MAAO,EACPC,OAAQ,EACRC,KAAM,I,wEAKR,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQd,YAAae,KAAKL,MAAMV,cAChC,oD,GAdoBgB,IAAMC,WCUnBC,MAVf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCGY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a088f1e1.chunk.js","sourcesContent":["const Aux = props => props.children;\n\nexport default Aux;\n","import React from \"react\";\n\nimport Aux from \"../../hoc/auxillary.component\";\n\nimport \"./layout.styles.scss\";\n\nconst Layout = props => (\n  <Aux>\n    <div>Toolbar, SideDrawer, Backdrop</div>\n    <main className=\"content\">{props.children}</main>\n  </Aux>\n);\n\nexport default Layout;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./burger-ingredients.styles.scss\";\n\nconst BurgerIngredients = props => {\n  switch (props.type) {\n    case \"bread-bottom\":\n      return <div className=\"bread-bottom\"></div>;\n    case \"bread-top\":\n      return (\n        <div className=\"bread-top\">\n          <div className=\"seeds1\"></div>\n          <div className=\"seeds2\"></div>\n        </div>\n      );\n    case \"meat\":\n      return <div className=\"meat\"></div>;\n    case \"cheese\":\n      return <div className=\"cheese\"></div>;\n    case \"salad\":\n      return <div className=\"salad\"></div>;\n    case \"bacon\":\n      return <div className=\"bacon\"></div>;\n    default:\n      return null;\n  }\n};\n\nBurgerIngredients.propTypes = {\n  type: PropTypes.string.isRequired\n};\n\nexport default BurgerIngredients;\n","import React from \"react\";\n\nimport BurgerIngredient from \"./burger-ingredient/burger-ingredient.component\";\n\nimport \"./burger.styles.scss\";\n\nconst Burger = props => {\n  const transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n    console.log([...Array(props.ingredients[igKey])]);\n    return [...Array(props.ingredients[igKey])].map((_, i) => {\n      return <BurgerIngredient key={igKey + i} type={igKey} />;\n    });\n  });\n  return (\n    <div className=\"burger\">\n      <BurgerIngredient type=\"bread-top\" />\n      {transformedIngredients}\n      <BurgerIngredient type=\"bread-bottom\" />\n    </div>\n  );\n};\n\nexport default Burger;\n","import React from \"react\";\n\nimport Aux from \"../../hoc/auxillary.component\";\nimport Burger from \"../../components/burger/burger.component\";\n\nclass BurderBuilder extends React.Component {\n  state = {\n    ingredients: {\n      salad: 1,\n      bacon: 1,\n      cheese: 2,\n      meat: 2\n    }\n  };\n\n  render() {\n    return (\n      <Aux>\n        <Burger ingredients={this.state.ingredients} />\n        <div>Build Controls</div>\n      </Aux>\n    );\n  }\n}\n\nexport default BurderBuilder;\n","import React from \"react\";\n\nimport Layout from \"./components/layout/layout.component.jsx\";\nimport BurgerBuilder from \"./containers/burger-builder/burger-builder.component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <BurgerBuilder></BurgerBuilder>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}