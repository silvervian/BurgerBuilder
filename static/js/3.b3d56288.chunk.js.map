{"version":3,"sources":["containers/checkout/contact-data/contact-data.component.jsx","components/order/checkout-summary/checkout-summary.component.jsx","containers/checkout/checkout.component.jsx","components/ui/input/input.component.jsx"],"names":["ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementId","order","ingredients","props","ings","price","toFixed","orderData","userId","onOrderData","token","inputChangedHandler","inputId","updatedOrderForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","length","isEmail","test","isNumeric","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","invalid","shouldValidate","changed","btnType","disabled","loading","className","React","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","CheckoutSummary","style","width","margin","clicked","CheckoutCancelled","CheckoutContinue","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinueHandler","replace","summary","to","purchasedRidirect","purchased","Fragment","path","match","component","Input","inputElement","isFormValid","onChange","option","label"],"mappings":"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","file":"static/js/3.b3d56288.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"../../../axios-orders\";\nimport { connect } from \"react-redux\";\n\nimport Spinner from \"../../../components/ui/spinner/spinner.component\";\nimport Button from \"../../../components/ui/button/button.component\";\nimport Input from \"../../../components/ui/input/input.component\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\n\nimport \"./contact-data.styles.scss\";\n\nclass ContactData extends React.Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP Code\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 6\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            {\n              value: \"fastest\",\n              displayValue: \"Fastest\"\n            },\n            {\n              value: \"cheapest\",\n              displayValue: \"Cheapest\"\n            }\n          ]\n        },\n        value: \"fastest\",\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false\n  };\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  orderHandler = event => {\n    event.preventDefault();\n    const formData = {};\n    for (let formElementId in this.state.orderForm) {\n      formData[formElementId] = this.state.orderForm[formElementId].value;\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price.toFixed(2),\n      orderData: formData,\n      userId: this.props.userId\n    };\n\n    this.props.onOrderData(order, this.props.token);\n  };\n\n  inputChangedHandler = (event, inputId) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = {\n      ...updatedOrderForm[inputId]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputId] = updatedFormElement;\n\n    let formIsValid = true;\n    for (let inputId in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputId].valid && formIsValid;\n    }\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button btnType=\"success\" disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className=\"contact-data\">\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderData: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React from \"react\";\n\nimport Burger from \"../../burger/burger.component\";\nimport Button from \"../../ui/button/button.component\";\n\nimport \"./checkout-summary.styles.scss\";\n\nconst CheckoutSummary = props => {\n  return (\n    <div className=\"checkout-summary\">\n      <h1>We hope it tastes well!</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n        <Button btnType=\"danger\" clicked={props.CheckoutCancelled}>\n          CANCEL\n        </Button>\n        <Button btnType=\"success\" clicked={props.CheckoutContinue}>\n          CONTINUE\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckoutSummary;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport ContactData from \"./contact-data/contact-data.component\";\nimport CheckoutSummary from \"../../components/order/checkout-summary/checkout-summary.component\";\n\nclass Checkout extends React.Component {\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n  checkoutContinueHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render() {\n    let summary = <Redirect to=\"/\" />;\n    if (this.props.ings) {\n      const purchasedRidirect = this.props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null;\n      summary = (\n        <React.Fragment>\n          {purchasedRidirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            CheckoutCancelled={this.checkoutCancelledHandler}\n            CheckoutContinue={this.checkoutContinueHandler}\n          />\n          <Route\n            path={`${this.props.match.path}/contact-data`}\n            component={ContactData}\n          />\n        </React.Fragment>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from \"react\";\n\nimport \"./input.styles.scss\";\n\nconst Input = props => {\n  let inputElement = null;\n\n  const isFormValid = () => {\n    return props.invalid && props.shouldValidate && props.touched\n      ? \"invalid\"\n      : \"\";\n  };\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={`input-element ${isFormValid()}`}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={`input-element ${isFormValid()}`}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={`input-element ${isFormValid()}`}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className=\"input-element\"\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className=\"input\">\n      <label className=\"label\">{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n"],"sourceRoot":""}