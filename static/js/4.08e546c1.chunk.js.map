{"version":3,"sources":["components/ui/input/input.component.jsx","containers/auth/auth.component.jsx"],"names":["Input","props","inputElement","isFormValid","invalid","shouldValidate","touched","elementType","className","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","connect","state","loading","auth","error","isAuth","token","building","burgerBuilder","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignUp","checkValidity","rules","isValid","trim","length","maxLength","test","isNumeric","useEffect","formElementsArray","push","id","config","form","formElement","event","controlName","updatedControls","target","inputChangedHandler","errorMessage","message","authRedirect","to","onSubmit","preventDefault","btnType","clicked"],"mappings":"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","file":"static/js/4.08e546c1.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./input.styles.scss\";\n\nconst Input = props => {\n  let inputElement = null;\n\n  const isFormValid = () => {\n    return props.invalid && props.shouldValidate && props.touched\n      ? \"invalid\"\n      : \"\";\n  };\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={`input-element ${isFormValid()}`}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={`input-element ${isFormValid()}`}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={`input-element ${isFormValid()}`}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className=\"input-element\"\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className=\"input\">\n      <label className=\"label\">{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Input from \"../../components/ui/input/input.component\";\nimport Button from \"../../components/ui/button/button.component\";\nimport Spinner from \"../../components/ui/spinner/spinner.component\";\nimport * as actions from \"../../store/actions/index\";\n\nimport \"./auth.styless.scss\";\n\nconst Auth = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Your Email\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        placeholder: \"Password\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  const [isSignUp, setIsSignUp] = useState(true);\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  };\n\n  const { building, authRedirectPath, onSetAuthRedirectPath } = props;\n  useEffect(() => {\n    if (!building && authRedirectPath) {\n      onSetAuthRedirectPath();\n    }\n  }, [authRedirectPath, building, onSetAuthRedirectPath]);\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...authForm,\n      [controlName]: {\n        ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          authForm[controlName].validation\n        ),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(authForm.email.value, authForm.password.value, isSignUp);\n  };\n\n  const switchAuthModeHandler = () => {\n    setIsSignUp(!isSignUp);\n  };\n\n  const formElementsArray = [];\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => (\n    <Input\n      key={formElement.id}\n      elementType={formElement.config.elementType}\n      elementConfig={formElement.config.elementConfig}\n      value={formElement.config.value}\n      invalid={!formElement.config.valid}\n      shouldValidate={formElement.config.validation}\n      touched={formElement.config.touched}\n      changed={event => inputChangedHandler(event, formElement.id)}\n    />\n  ));\n\n  if (props.loading) {\n    form = <Spinner />;\n  }\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = <p>{props.error.message}</p>;\n  }\n\n  let authRedirect = null;\n  if (props.isAuth) {\n    authRedirect = <Redirect to={props.authRedirectPath} />;\n  }\n\n  return (\n    <div className=\"auth\">\n      {authRedirect}\n      {errorMessage}\n      <form onSubmit={submitHandler}>\n        {form}\n        <Button btnType=\"success\">SUBMIT</Button>\n      </form>\n      <Button btnType=\"danger\" clicked={switchAuthModeHandler}>\n        SWITCH TO {isSignUp ? \"SIGN IN\" : \"SIGN UP\"}\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToprops = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToprops)(Auth);\n"],"sourceRoot":""}