{"version":3,"sources":["containers/auth/auth.component.jsx","components/ui/input/input.component.jsx"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","rules","isValid","trim","length","maxLength","test","isNumeric","this","building","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuth","to","className","onSubmit","btnType","clicked","React","Component","connect","auth","token","burgerBuilder","dispatch","actions","Input","inputElement","isFormValid","onChange","options","option","displayValue","label"],"mappings":"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","file":"static/js/4.c4289e92.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Input from \"../../components/ui/input/input.component\";\nimport Button from \"../../components/ui/button/button.component\";\nimport Spinner from \"../../components/ui/spinner/spinner.component\";\nimport * as actions from \"../../store/actions/index\";\n\nimport \"./auth.styless.scss\";\n\nclass Auth extends React.Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your Email\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignUp: true\n  };\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  componentDidMount() {\n    if (!this.props.building && this.props.authRedirectPath) {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = {\n      ...this.state.controls,\n      [controlName]: {\n        ...this.state.controls[controlName],\n        value: event.target.value,\n        valid: this.checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true\n      }\n    };\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignUp\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return { isSignUp: !prevState.isSignUp };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={event => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuth) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n\n    return (\n      <div className=\"auth\">\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"success\">SUBMIT</Button>\n        </form>\n        <Button btnType=\"danger\" clicked={this.switchAuthModeHandler}>\n          SWITCH TO {this.state.isSignUp ? \"SIGN IN\" : \"SIGN UP\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToprops = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToprops)(Auth);\n","import React from \"react\";\n\nimport \"./input.styles.scss\";\n\nconst Input = props => {\n  let inputElement = null;\n\n  const isFormValid = () => {\n    return props.invalid && props.shouldValidate && props.touched\n      ? \"invalid\"\n      : \"\";\n  };\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={`input-element ${isFormValid()}`}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={`input-element ${isFormValid()}`}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={`input-element ${isFormValid()}`}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className=\"input-element\"\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className=\"input\">\n      <label className=\"label\">{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n"],"sourceRoot":""}