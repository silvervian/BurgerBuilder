{"version":3,"sources":["components/ui/input/input.component.jsx","containers/checkout/contact-data/contact-data.component.jsx","components/order/checkout-summary/checkout-summary.component.jsx","containers/checkout/checkout.component.jsx"],"names":["Input","props","inputElement","isFormValid","invalid","shouldValidate","touched","elementType","className","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","connect","state","ings","burgerBuilder","ingredients","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderData","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","push","id","config","form","onSubmit","event","preventDefault","formData","formElementId","toFixed","formElement","inputId","updatedOrderForm","updatedFormElement","target","rules","isValid","trim","length","isEmail","test","isNumeric","checkValidity","inputChangedHandler","btnType","disabled","axios","CheckoutSummary","style","width","margin","clicked","CheckoutCancelled","CheckoutContinue","purchased","summary","to","purchasedRidirect","Fragment","history","goBack","replace","path","match","component","ContactData"],"mappings":"uHAAA,0BAqEeA,IAjED,SAAAC,GACZ,IAAIC,EAAe,KAEbC,EAAc,WAClB,OAAOF,EAAMG,SAAWH,EAAMI,gBAAkBJ,EAAMK,QAClD,UACA,IAGN,OAAQL,EAAMM,aACZ,IAAK,QACHL,EACE,yCACEM,UAAS,wBAAmBL,MACxBF,EAAMQ,cAFZ,CAGEC,MAAOT,EAAMS,MACbC,SAAUV,EAAMW,WAGpB,MACF,IAAK,WACHV,EACE,4CACEM,UAAS,wBAAmBL,MACxBF,EAAMQ,cAFZ,CAGEC,MAAOT,EAAMS,MACbC,SAAUV,EAAMW,WAGpB,MACF,IAAK,SACHV,EACE,4BACEM,UAAS,wBAAmBL,KAC5BO,MAAOT,EAAMS,MACbC,SAAUV,EAAMW,SAEfX,EAAMQ,cAAcI,QAAQC,KAAI,SAAAC,GAAM,OACrC,4BAAQC,IAAKD,EAAOL,MAAOA,MAAOK,EAAOL,OACtCK,EAAOE,kBAKhB,MACF,QACEf,EACE,yCACEM,UAAU,iBACNP,EAAMQ,cAFZ,CAGEC,MAAOT,EAAMS,MACbC,SAAUV,EAAMW,WAMxB,OACE,yBAAKJ,UAAU,SACb,2BAAOA,UAAU,SAASP,EAAMiB,OAC/BhB,K,wMCmKQiB,G,MAAAA,aAjBS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAME,cAAcC,YAC1BC,MAAOJ,EAAME,cAAcG,WAC3BC,QAASN,EAAMO,MAAMD,QACrBE,MAAOR,EAAMS,KAAKD,MAClBE,OAAQV,EAAMS,KAAKC,WAII,SAAAC,GACzB,MAAO,CACLC,YAAa,SAACC,EAAWL,GAAZ,OACXG,EAASG,IAAuBD,EAAWL,QAIlCT,CAGbgB,aA1NkB,SAAAlC,GAAU,IAAD,EACOmC,mBAAS,CACzCC,KAAM,CACJ9B,YAAa,QACbE,cAAe,CACb6B,KAAM,OACNC,YAAa,aAEf7B,MAAO,GACP8B,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPpC,SAAS,GAEXqC,OAAQ,CACNpC,YAAa,QACbE,cAAe,CACb6B,KAAM,OACNC,YAAa,UAEf7B,MAAO,GACP8B,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPpC,SAAS,GAEXsC,QAAS,CACPrC,YAAa,QACbE,cAAe,CACb6B,KAAM,OACNC,YAAa,YAEf7B,MAAO,GACP8B,WAAY,CACVC,UAAU,EACVI,UAAW,EACXC,UAAW,GAEbJ,OAAO,EACPpC,SAAS,GAEXyC,QAAS,CACPxC,YAAa,QACbE,cAAe,CACb6B,KAAM,OACNC,YAAa,WAEf7B,MAAO,GACP8B,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPpC,SAAS,GAEX0C,MAAO,CACLzC,YAAa,QACbE,cAAe,CACb6B,KAAM,QACNC,YAAa,SAEf7B,MAAO,GACP8B,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPpC,SAAS,GAEX2C,eAAgB,CACd1C,YAAa,SACbE,cAAe,CACbI,QAAS,CACP,CACEH,MAAO,UACPO,aAAc,WAEhB,CACEP,MAAO,WACPO,aAAc,cAIpBP,MAAO,UACP8B,WAAY,GACZE,OAAO,KArFgB,mBACpBQ,EADoB,KACTC,EADS,OAwFWf,oBAAS,GAxFpB,mBAwFpBgB,EAxFoB,KAwFPC,EAxFO,KAgKrBC,EAAoB,GAC1B,IAAK,IAAItC,KAAOkC,EACdI,EAAkBC,KAAK,CACrBC,GAAIxC,EACJyC,OAAQP,EAAUlC,KAGtB,IAAI0C,EACF,0BAAMC,SA/Ca,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAiBb,EACxBY,EAASC,GAAiBb,EAAUa,GAAerD,MAErD,IAAMiB,EAAQ,CACZJ,YAAatB,EAAMoB,KACnBG,MAAOvB,EAAMuB,MAAMwC,QAAQ,GAC3B/B,UAAW6B,EACXhC,OAAQ7B,EAAM6B,QAGhB7B,EAAM+B,YAAYL,EAAO1B,EAAM2B,SAmC5B0B,EAAkBxC,KAAI,SAAAmD,GAAW,OAChC,kBAAC,IAAD,CACEjD,IAAKiD,EAAYT,GACjBjD,YAAa0D,EAAYR,OAAOlD,YAChCE,cAAewD,EAAYR,OAAOhD,cAClCC,MAAOuD,EAAYR,OAAO/C,MAC1BN,SAAU6D,EAAYR,OAAOf,MAC7BrC,eAAgB4D,EAAYR,OAAOjB,WACnClC,QAAS2D,EAAYR,OAAOnD,QAC5BM,QAAS,SAAAgD,GAAK,OAzCM,SAACA,EAAOM,GAClC,IAAMC,EAAgB,eACjBjB,GAECkB,EAAkB,eACnBD,EAAiBD,IAEtBE,EAAmB1D,MAAQkD,EAAMS,OAAO3D,MACxC0D,EAAmB1B,MAvDC,SAAChC,EAAO4D,GAC5B,IAAIC,GAAU,EACd,IAAKD,EACH,OAAO,EAeT,GAZIA,EAAM7B,WACR8B,EAA2B,KAAjB7D,EAAM8D,QAAiBD,GAG/BD,EAAMzB,YACR0B,EAAU7D,EAAM+D,QAAUH,EAAMzB,WAAa0B,GAG3CD,EAAMxB,YACRyB,EAAU7D,EAAM+D,QAAUH,EAAMxB,WAAayB,GAG3CD,EAAMI,QAAS,CAEjBH,EADgB,wIACEI,KAAKjE,IAAU6D,EAGnC,GAAID,EAAMM,UAAW,CAEnBL,EADgB,QACEI,KAAKjE,IAAU6D,EAGnC,OAAOA,EA2BoBM,CACzBT,EAAmB1D,MACnB0D,EAAmB5B,YAErB4B,EAAmB9D,SAAU,EAC7B6D,EAAiBD,GAAWE,EAE5B,IAAIhB,GAAc,EAClB,IAAK,IAAIc,KAAWC,EAClBf,EAAce,EAAiBD,GAASxB,OAASU,EAEnDD,EAAagB,GACbd,EAAeD,GAqBS0B,CAAoBlB,EAAOK,EAAYT,UAG7D,kBAAC,IAAD,CAAQuB,QAAQ,UAAUC,UAAW5B,GAArC,UAQJ,OAHInD,EAAMyB,UACRgC,EAAO,kBAAC,IAAD,OAGP,yBAAKlD,UAAU,gBACb,uDACCkD,KA0ByBuB,O,QC9MjBC,G,MAjBS,SAAAjF,GACtB,OACE,yBAAKO,UAAU,oBACb,uDACA,yBAAK2E,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACnC,kBAAC,IAAD,CAAQ9D,YAAatB,EAAMsB,cAC3B,kBAAC,IAAD,CAAQwD,QAAQ,SAASO,QAASrF,EAAMsF,mBAAxC,UAGA,kBAAC,IAAD,CAAQR,QAAQ,UAAUO,QAASrF,EAAMuF,kBAAzC,gBC6BOrE,uBAPS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAME,cAAcC,YAC1BkE,UAAWrE,EAAMO,MAAM8D,aAIZtE,EAtCE,SAAClB,GAChB,IAOIyF,EAAU,kBAAC,IAAD,CAAUC,GAAG,MAC3B,GAAI1F,EAAMoB,KAAM,CACd,IAAMuE,EAAoB3F,EAAMwF,WAC9B,kBAAC,IAAD,CAAUE,GAAG,MAEfD,EACE,kBAAC,IAAMG,SAAP,KACGD,EACD,kBAAC,EAAD,CACErE,YAAatB,EAAMoB,KACnBkE,kBAjByB,WAC/BtF,EAAM6F,QAAQC,UAiBRP,iBAfwB,WAC9BvF,EAAM6F,QAAQE,QAAQ,6BAgBlB,kBAAC,IAAD,CACEC,KAAI,UAAKhG,EAAMiG,MAAMD,KAAjB,iBACJE,UAAWC,KAKnB,OAAOV","file":"static/js/3.6ee31f8c.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./input.styles.scss\";\n\nconst Input = props => {\n  let inputElement = null;\n\n  const isFormValid = () => {\n    return props.invalid && props.shouldValidate && props.touched\n      ? \"invalid\"\n      : \"\";\n  };\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={`input-element ${isFormValid()}`}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={`input-element ${isFormValid()}`}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={`input-element ${isFormValid()}`}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className=\"input-element\"\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className=\"input\">\n      <label className=\"label\">{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { useState } from \"react\";\nimport axios from \"../../../axios-orders\";\nimport { connect } from \"react-redux\";\n\nimport Spinner from \"../../../components/ui/spinner/spinner.component\";\nimport Button from \"../../../components/ui/button/button.component\";\nimport Input from \"../../../components/ui/input/input.component\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\n\nimport \"./contact-data.styles.scss\";\n\nconst ContactData = props => {\n  const [orderForm, setOrderForm] = useState({\n    name: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Your Name\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Street\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"ZIP Code\"\n      },\n      value: \"\",\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        placeholder: \"Country\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        placeholder: \"Email\"\n      },\n      value: \"\",\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: \"select\",\n      elementConfig: {\n        options: [\n          {\n            value: \"fastest\",\n            displayValue: \"Fastest\"\n          },\n          {\n            value: \"cheapest\",\n            displayValue: \"Cheapest\"\n          }\n        ]\n      },\n      value: \"fastest\",\n      validation: {},\n      valid: true\n    }\n  });\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  const orderHandler = event => {\n    event.preventDefault();\n    const formData = {};\n    for (let formElementId in orderForm) {\n      formData[formElementId] = orderForm[formElementId].value;\n    }\n    const order = {\n      ingredients: props.ings,\n      price: props.price.toFixed(2),\n      orderData: formData,\n      userId: props.userId\n    };\n\n    props.onOrderData(order, props.token);\n  };\n\n  const inputChangedHandler = (event, inputId) => {\n    const updatedOrderForm = {\n      ...orderForm\n    };\n    const updatedFormElement = {\n      ...updatedOrderForm[inputId]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedFormElement.touched = true;\n    updatedOrderForm[inputId] = updatedFormElement;\n\n    let formIsValid = true;\n    for (let inputId in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputId].valid && formIsValid;\n    }\n    setOrderForm(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  };\n\n  const formElementsArray = [];\n  for (let key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n  let form = (\n    <form onSubmit={orderHandler}>\n      {formElementsArray.map(formElement => (\n        <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={event => inputChangedHandler(event, formElement.id)}\n        />\n      ))}\n      <Button btnType=\"success\" disabled={!formIsValid}>\n        ORDER\n        </Button>\n    </form>\n  );\n  if (props.loading) {\n    form = <Spinner />;\n  }\n  return (\n    <div className=\"contact-data\">\n      <h4>Enter your Contact Data</h4>\n      {form}\n    </div>\n  );\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderData: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React from \"react\";\n\nimport Burger from \"../../burger/burger.component\";\nimport Button from \"../../ui/button/button.component\";\n\nimport \"./checkout-summary.styles.scss\";\n\nconst CheckoutSummary = props => {\n  return (\n    <div className=\"checkout-summary\">\n      <h1>We hope it tastes well!</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n        <Button btnType=\"danger\" clicked={props.CheckoutCancelled}>\n          CANCEL\n        </Button>\n        <Button btnType=\"success\" clicked={props.CheckoutContinue}>\n          CONTINUE\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckoutSummary;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport ContactData from \"./contact-data/contact-data.component\";\nimport CheckoutSummary from \"../../components/order/checkout-summary/checkout-summary.component\";\n\nconst Checkout = (props) => {\n  const checkoutCancelledHandler = () => {\n    props.history.goBack();\n  };\n  const checkoutContinueHandler = () => {\n    props.history.replace(\"/checkout/contact-data\");\n  };\n\n  let summary = <Redirect to=\"/\" />;\n  if (props.ings) {\n    const purchasedRidirect = props.purchased && (\n      <Redirect to=\"/\" />\n    )\n    summary = (\n      <React.Fragment>\n        {purchasedRidirect}\n        <CheckoutSummary\n          ingredients={props.ings}\n          CheckoutCancelled={checkoutCancelledHandler}\n          CheckoutContinue={checkoutContinueHandler}\n        />\n        <Route\n          path={`${props.match.path}/contact-data`}\n          component={ContactData}\n        />\n      </React.Fragment>\n    );\n  }\n  return summary;\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n"],"sourceRoot":""}